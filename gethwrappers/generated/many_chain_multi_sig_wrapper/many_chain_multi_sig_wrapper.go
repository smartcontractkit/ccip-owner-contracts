// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package many_chain_multi_sig_wrapper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type ManyChainMultiSigConfig struct {
	Signers      []ManyChainMultiSigSigner
	GroupQuorums [32]uint8
	GroupParents [32]uint8
}

type ManyChainMultiSigOp struct {
	ChainId  *big.Int
	MultiSig common.Address
	Nonce    *big.Int
	To       common.Address
	Value    *big.Int
	Data     []byte
}

type ManyChainMultiSigRootMetadata struct {
	ChainId              *big.Int
	MultiSig             common.Address
	PreOpCount           *big.Int
	PostOpCount          *big.Int
	OverridePreviousRoot bool
}

type ManyChainMultiSigSignature struct {
	V uint8
	R [32]byte
	S [32]byte
}

type ManyChainMultiSigSigner struct {
	Addr  common.Address
	Index uint8
	Group uint8
}

var ManyChainMultiSigMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"CallReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GroupTreeNotWellFormed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBoundsGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBoundsGroupQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBoundsNumOfSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PostOpCountReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofCannotBeVerified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RootExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignedHashAlreadySeen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerGroupsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerInDisabledGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignersAddressesMustBeStrictlyIncreasing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidUntilHasAlreadyPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMultiSig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPostOpCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPreOpCount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"group\",\"type\":\"uint8\"}],\"internalType\":\"structManyChainMultiSig.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[32]\",\"name\":\"groupQuorums\",\"type\":\"uint8[32]\"},{\"internalType\":\"uint8[32]\",\"name\":\"groupParents\",\"type\":\"uint8[32]\"}],\"indexed\":false,\"internalType\":\"structManyChainMultiSig.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRootCleared\",\"type\":\"bool\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"validUntil\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiSig\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"preOpCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"postOpCount\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"overridePreviousRoot\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structManyChainMultiSig.RootMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"NewRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"nonce\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OpExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUM_SIGNERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_GROUPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiSig\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"nonce\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structManyChainMultiSig.Op\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"group\",\"type\":\"uint8\"}],\"internalType\":\"structManyChainMultiSig.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[32]\",\"name\":\"groupQuorums\",\"type\":\"uint8[32]\"},{\"internalType\":\"uint8[32]\",\"name\":\"groupParents\",\"type\":\"uint8[32]\"}],\"internalType\":\"structManyChainMultiSig.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpCount\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"validUntil\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiSig\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"preOpCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"postOpCount\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"overridePreviousRoot\",\"type\":\"bool\"}],\"internalType\":\"structManyChainMultiSig.RootMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"signerGroups\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[32]\",\"name\":\"groupQuorums\",\"type\":\"uint8[32]\"},{\"internalType\":\"uint8[32]\",\"name\":\"groupParents\",\"type\":\"uint8[32]\"},{\"internalType\":\"bool\",\"name\":\"clearRoot\",\"type\":\"bool\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"validUntil\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiSig\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"preOpCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"postOpCount\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"overridePreviousRoot\",\"type\":\"bool\"}],\"internalType\":\"structManyChainMultiSig.RootMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"metadataProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structManyChainMultiSig.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000091565b600180546001600160a01b03191690556200003e8162000041565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612f7580620000a16000396000f3fe6080604052600436106100e15760003560e01c8063846c67ef1161007f578063b759d68511610059578063b759d685146103c0578063c3f909d4146103d3578063e30c3978146103f5578063f2fde38b1461042057600080fd5b8063846c67ef1461033f5780638da5cb5b1461035f578063a76f5598146103ab57600080fd5b80636b45fb3e116100bb5780636b45fb3e146101a5578063715018a6146102f357806379ba50971461030a5780637cc38b281461031f57600080fd5b80635a2519ef146100ed5780635ca1e16514610119578063627e8a3b1461017057600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b50610102602081565b60405160ff90911681526020015b60405180910390f35b34801561012557600080fd5b506040805160608101825260075480825260085463ffffffff8116602080850182905264010000000090920464ffffffffff1693850193909352835191825281019190915201610110565b34801561017c57600080fd5b50600854640100000000900464ffffffffff1660405164ffffffffff9091168152602001610110565b3480156101b157600080fd5b5061028c6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506040805160a0810182526009548152600a5473ffffffffffffffffffffffffffffffffffffffff8116602083015274010000000000000000000000000000000000000000810464ffffffffff90811693830193909352790100000000000000000000000000000000000000000000000000810490921660608201527e0100000000000000000000000000000000000000000000000000000000000090910460ff161515608082015290565b6040516101109190600060a0820190508251825273ffffffffffffffffffffffffffffffffffffffff6020840151166020830152604083015164ffffffffff8082166040850152806060860151166060850152505060808301511515608083015292915050565b3480156102ff57600080fd5b50610308610440565b005b34801561031657600080fd5b50610308610454565b34801561032b57600080fd5b5061030861033a3660046122d6565b61050e565b34801561034b57600080fd5b5061030861035a3660046123f8565b610cd0565b34801561036b57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610110565b3480156103b757600080fd5b5061010260c881565b6103086103ce3660046124a3565b6116bd565b3480156103df57600080fd5b506103e8611a3b565b6040516101109190612544565b34801561040157600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff16610386565b34801561042c57600080fd5b5061030861043b366004612612565b611bad565b610448611c5d565b6104526000611cde565b565b600154339073ffffffffffffffffffffffffffffffffffffffff168114610502576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61050b81611cde565b50565b600061057e888860405160200161053592919091825263ffffffff16602082015260400190565b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b60008181526006602052604090205490915060ff16156105ca576040517f48c2688b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252600080825260208201819052918101829052906105ef612194565b60005b85811015610836573687878381811061060d5761060d61262f565b6060029190910191506000905061063a8761062b602085018561265e565b84602001358560400135611d0f565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106106a1576040517f4a36ec0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8082166000818152600260209081526040918290208251606081018452905494851680825260ff7401000000000000000000000000000000000000000087048116938301939093527501000000000000000000000000000000000000000000909504909116918101919091529750919550859114610760576040517f815e1d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408601515b848160ff166020811061077b5761077b61262f565b6020020180519061078b826126b0565b60ff908116909152600491508216602081106107a9576107a961262f565b602091828204019190069054906101000a900460ff1660ff16858260ff16602081106107d7576107d761262f565b602002015160ff16036108205760ff81161561082057600560ff8216602081106108035761080361262f565b602081049091015460ff601f9092166101000a9004169050610766565b505050808061082e906126cf565b9150506105f2565b5060045460ff16600003610876576040517faa6185ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454815160ff918216911610156108ba576040517fc2ee9b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050428763ffffffff1610156108fd576040517fb057a45200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007fe6b82be989101b4eb519770114b997b97b3c8707515286748a871717f0e4ea1c87604051602001610932929190612793565b60405160208183030381529060405280519060200120905061098a8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d9250859150611d379050565b6109c0576040517f2522a1c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50468635146109fb576040517f5f87bc0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a0b6040870160208801612612565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610a6f576040517f9a84601500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600854600a5464ffffffffff640100000000909204821691790100000000000000000000000000000000000000000000000000909104168114801590610ac25750610ac060a08801608089016127a7565b155b15610af9576040517f3230825b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b0960608801604089016127c4565b64ffffffffff168164ffffffffff1614610b4f576040517fa255a76300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b5f60808801606089016127c4565b64ffffffffff16610b766060890160408a016127c4565b64ffffffffff161115610bb5576040517fc61352f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526006602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558151606080820184528c825263ffffffff8c16928201929092529182810191610c1e91908b01908b016127c4565b64ffffffffff9081169091528151600755602082015160088054604090940151909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090931663ffffffff90911617919091179055866009610c8882826127e1565b905050887f7ea643ae44677f24e0d6f40168893712daaf729b0a38fe7702d21cb544c841018989604051610cbd9291906128d7565b60405180910390a2505050505050505050565b610cd8611c5d565b851580610ce5575060c886115b15610d1c576040517ff0ec1ca400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858414610d55576040517ff1f3053000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5d612194565b60005b85811015610e2e576020878783818110610d7c57610d7c61262f565b9050602002016020810190610d91919061265e565b60ff1610610dcb576040517fb9ae8e5200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81878783818110610dde57610dde61262f565b9050602002016020810190610df3919061265e565b60ff1660208110610e0657610e0661262f565b60200201805190610e16826126b0565b60ff1690525080610e26816126cf565b915050610d60565b5060005b602081101561106857600081610e4a600160206128f1565b60ff16610e57919061290a565b90508015801590610e8f575080858260208110610e7657610e7661262f565b602002016020810190610e89919061265e565b60ff1610155b80610ec9575080158015610ec95750848160208110610eb057610eb061262f565b602002016020810190610ec3919061265e565b60ff1615155b15610f00576040517fff063a2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000868260208110610f1457610f1461262f565b602002016020810190610f27919061265e565b60ff161590508015610f8957838260208110610f4557610f4561262f565b602002015160ff1615610f84576040517f8db4e75d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611053565b868260208110610f9b57610f9b61262f565b602002016020810190610fae919061265e565b60ff16848360208110610fc357610fc361262f565b602002015160ff161015611003576040517fbb00136e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838683602081106110165761101661262f565b602002016020810190611029919061265e565b60ff166020811061103c5761103c61262f565b6020020180519061104c826126b0565b60ff169052505b50508080611060906126cf565b915050610e32565b505060006003600001805480602002602001604051908101604052809291908181526020016000905b82821015611118576000848152602090819020604080516060810182529185015473ffffffffffffffffffffffffffffffffffffffff8116835260ff74010000000000000000000000000000000000000000820481168486015275010000000000000000000000000000000000000000009091041690820152825260019092019101611091565b50505050905060005b815181101561121757600082828151811061113e5761113e61262f565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff811660009081526002909252604090912080547fffffffffffffffffffff000000000000000000000000000000000000000000001690556003805491925090806111ac576111ac61291d565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffff00000000000000000000000000000000000000000000169055019055508061120f816126cf565b915050611121565b50600354156112285761122861294c565b61123560048560206121b3565b5061124360058460206121b3565b506000805b888110156114ee578989828181106112625761126261262f565b90506020020160208101906112779190612612565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16106112db576040517f4a36ec0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052808c8c858181106112fa576112fa61262f565b905060200201602081019061130f9190612612565b73ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681526020018a8a858181106113455761134561262f565b905060200201602081019061135a919061265e565b60ff169052905080600260008d8d868181106113785761137861262f565b905060200201602081019061138d9190612612565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812085518154878701519786015160ff90811675010000000000000000000000000000000000000000009081027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff9a8316740100000000000000000000000000000000000000009081027fffffffffffffffffffffff000000000000000000000000000000000000000000958616968a1696909617959095178b161790945560038054600181018255955289517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054988b0151978b01518216909402961690910295169190921617929092179092169190911790558a8a838181106114c3576114c361262f565b90506020020160208101906114d89190612612565b92505080806114e6906126cf565b915050611248565b508215611678576008805460408051606080820183526000808352602080840182905264010000000080870464ffffffffff169486018590526007929092557fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090951690830217909455815160a08101835246808252309482018590529281018290529384018190526001608090940193909352600955600a80547e010000000000000000000000000000000000000000000000000000000000007fffffffffffffff000000000000000000000000000000000000000000000000009091167fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff90931692909217740100000000000000000000000000000000000000008402177fff000000000000ffffffffffffffffffffffffffffffffffffffffffffffffff167901000000000000000000000000000000000000000000000000009093027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16929092171790555b7f0a4974ad206b9c736f9ab2feac1c9b1d043fe4ef377c70ae45659f2ef089f03e6003846040516116aa929190612c03565b60405180910390a1505050505050505050565b60408051606081018252600754815260085463ffffffff8116602083015264ffffffffff6401000000009091048116928201839052600a549192790100000000000000000000000000000000000000000000000000909204161161174d576040517fadb1331800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83354614611787576040517f5f87bc0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b306117986040860160208701612612565b73ffffffffffffffffffffffffffffffffffffffff16146117e5576040517f9a84601500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015163ffffffff16421115611829576040517f9ba6743000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015164ffffffffff1684604001602081019061184891906127c4565b64ffffffffff1614611886576040517fd9c6386f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f08d275622006c4ca82d03f498e90163cafd53c663a48470c3b52ac8bfbd9f52c856040516020016118bb929190612cfd565b6040516020818303038152906040528051906020012090506119138484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505085519150849050611d37565b611949576040517f2522a1c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040820151611959906001612df2565b6008805464ffffffffff92909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff9092169190911790556119c26119ab6080870160608801612612565b60808701356119bd60a0890189612e17565b611d4f565b6119d260608601604087016127c4565b64ffffffffff167f87d58fdd48be753fb9ef4ec8a5895086c401506da8b4d752abc90602c3e62d1d611a0a6080880160608901612612565b611a1760a0890189612e17565b8960800135604051611a2c9493929190612e7c565b60405180910390a25050505050565b611a43612249565b604080516003805460806020820284018101909452606083018181529293919284929091849160009085015b82821015611af6576000848152602090819020604080516060810182529185015473ffffffffffffffffffffffffffffffffffffffff8116835260ff74010000000000000000000000000000000000000000820481168486015275010000000000000000000000000000000000000000009091041690820152825260019092019101611a6f565b50505090825250604080516104008101918290526020928301929091600185019190826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411611b1d575050509284525050604080516104008101918290526020938401939092506002850191826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411611b71579050505050505081525050905090565b611bb5611c5d565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155611c1860005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60005473ffffffffffffffffffffffffffffffffffffffff163314610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561050b81611e02565b6000806000611d2087878787611e77565b91509150611d2d81611f66565b5095945050505050565b600082611d448584612119565b1490505b9392505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16858585604051611d7a929190612ebd565b60006040518083038185875af1925050503d8060008114611db7576040519150601f19603f3d011682016040523d82523d6000602084013e611dbc565b606091505b509150915081611dfa57806040517f70de1b4b0000000000000000000000000000000000000000000000000000000081526004016104f99190612ecd565b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611eae5750600090506003611f5d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f02573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611f5657600060019250925050611f5d565b9150600090505b94509492505050565b6000816004811115611f7a57611f7a612f39565b03611f825750565b6001816004811115611f9657611f96612f39565b03611ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104f9565b600281600481111561201157612011612f39565b03612078576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104f9565b600381600481111561208c5761208c612f39565b0361050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104f9565b600081815b845181101561215e5761214a8286838151811061213d5761213d61262f565b6020026020010151612168565b915080612156816126cf565b91505061211e565b5090505b92915050565b6000818310612184576000828152602084905260409020611d48565b5060009182526020526040902090565b6040518061040001604052806020906020820280368337509192915050565b6001830191839082156122395791602002820160005b8382111561220a57833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026121c9565b80156122375782816101000a81549060ff021916905560010160208160000104928301926001030261220a565b505b50612245929150612275565b5090565b604051806060016040528060608152602001612263612194565b8152602001612270612194565b905290565b5b808211156122455760008155600101612276565b60008083601f84011261229c57600080fd5b50813567ffffffffffffffff8111156122b457600080fd5b6020830191508360208260051b85010111156122cf57600080fd5b9250929050565b60008060008060008060008789036101208112156122f357600080fd5b88359750602089013563ffffffff8116811461230e57600080fd5b965060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08201121561234057600080fd5b5060408801945060e088013567ffffffffffffffff8082111561236257600080fd5b61236e8b838c0161228a565b90965094506101008a013591508082111561238857600080fd5b818a0191508a601f83011261239c57600080fd5b8135818111156123ab57600080fd5b8b60206060830285010111156123c057600080fd5b60208301945080935050505092959891949750929550565b80610400810183101561216257600080fd5b801515811461050b57600080fd5b6000806000806000806000610860888a03121561241457600080fd5b873567ffffffffffffffff8082111561242c57600080fd5b6124388b838c0161228a565b909950975060208a013591508082111561245157600080fd5b5061245e8a828b0161228a565b909650945061247290508960408a016123d8565b9250612482896104408a016123d8565b9150610840880135612493816123ea565b8091505092959891949750929550565b6000806000604084860312156124b857600080fd5b833567ffffffffffffffff808211156124d057600080fd5b9085019060c082880312156124e457600080fd5b909350602085013590808211156124fa57600080fd5b506125078682870161228a565b9497909650939450505050565b8060005b6020808210612527575061253e565b825160ff1685529384019390910190600101612518565b50505050565b6020808252825161082083830152805161084084018190526000929182019083906108608601905b808310156125be578351805173ffffffffffffffffffffffffffffffffffffffff1683528581015160ff908116878501526040918201511690830152928401926001929092019160609091019061256c565b5092860151926125d16040870185612514565b604087015193506125e6610440870185612514565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461050b57600080fd5b60006020828403121561262457600080fd5b8135611d48816125f0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561267057600080fd5b813560ff81168114611d4857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff81036126c6576126c6612681565b60010192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361270057612700612681565b5060010190565b64ffffffffff8116811461050b57600080fd5b80358252602081013561272c816125f0565b73ffffffffffffffffffffffffffffffffffffffff166020830152604081013561275581612707565b64ffffffffff908116604084015260608201359061277282612707565b1660608301526080810135612786816123ea565b8015156080840152505050565b82815260c08101611d48602083018461271a565b6000602082840312156127b957600080fd5b8135611d48816123ea565b6000602082840312156127d657600080fd5b8135611d4881612707565b813581556001810160208301356127f7816125f0565b8154604085013561280781612707565b606086013561281581612707565b6080870135612823816123ea565b7eff00000000000000000000000000000000000000000000000000000000000081151560f01b1673ffffffffffffffffffffffffffffffffffffffff86167fff0000000000000000000000000000000000000000000000000000000000000086161778ffffffffff00000000000000000000000000000000000000008560a01b16177dffffffffff000000000000000000000000000000000000000000000000008460c81b16171786555050505050505050565b63ffffffff8316815260c08101611d48602083018461271a565b60ff828116828216039081111561216257612162612681565b8181038181111561216257612162612681565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b8060005b602080601f830110612991575061253e565b825460ff8082168752600882901c81168388015260406129ba818901838560101c1660ff169052565b60606129cf818a01848660181c1660ff169052565b60806129e3818b018587891c1660ff169052565b60a095506129fa868b01858760281c1660ff169052565b60c0612a0f818c01868860301c1660ff169052565b60e0612a24818d01878960381c1660ff169052565b60ff87861c8716166101008d0152612a476101208d01878960481c1660ff169052565b612a5c6101408d01878960501c1660ff169052565b612a716101608d01878960581c1660ff169052565b60ff87851c8716166101808d0152612a946101a08d01878960681c1660ff169052565b612aa96101c08d01878960701c1660ff169052565b612abe6101e08d01878960781c1660ff169052565b60ff87841c8716166102008d0152612ae16102208d01878960881c1660ff169052565b612af66102408d01878960901c1660ff169052565b612b0b6102608d01878960981c1660ff169052565b60ff87891c8716166102808d0152612b2e6102a08d01878960a81c1660ff169052565b612b436102c08d01878960b01c1660ff169052565b612b586102e08d01878960b81c1660ff169052565b60ff87831c8716166103008d0152612b7b6103208d01878960c81c1660ff169052565b612b906103408d01878960d01c1660ff169052565b612ba56103608d01878960d81c1660ff169052565b60ff87821c8716166103808d01525050505050612bcd6103a08801828460e81c1660ff169052565b612be26103c08801828460f01c1660ff169052565b5060f81c6103e086015250610400909301926001919091019060200161297f565b600060408083526108608301610820828501528086548083526108808601915087600052602092508260002060005b82811015612c7f57815473ffffffffffffffffffffffffffffffffffffffff8116855260ff60a082901c81168787015260a89190911c168685015260609093019260019182019101612c32565b505050612c92606086016001890161297b565b612ca361046086016002890161297b565b941515930192909252509092915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b828152604060208201528135604082015260006020830135612d1e816125f0565b73ffffffffffffffffffffffffffffffffffffffff9081166060840152604084013590612d4a82612707565b64ffffffffff8216608085015260608501359150612d67826125f0565b80821660a08501525050608083013560c083015260a08301357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612db057600080fd5b830160208101903567ffffffffffffffff811115612dcd57600080fd5b803603821315612ddc57600080fd5b60c060e08501526125e661010085018284612cb4565b64ffffffffff818116838216019080821115612e1057612e10612681565b5092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e4c57600080fd5b83018035915067ffffffffffffffff821115612e6757600080fd5b6020019150368190038213156122cf57600080fd5b73ffffffffffffffffffffffffffffffffffffffff85168152606060208201526000612eac606083018587612cb4565b905082604083015295945050505050565b8183823760009101908152919050565b600060208083528351808285015260005b81811015612efa57858101830151858201604001528201612ede565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a",
}

var ManyChainMultiSigABI = ManyChainMultiSigMetaData.ABI

var ManyChainMultiSigBin = ManyChainMultiSigMetaData.Bin

func DeployManyChainMultiSig(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ManyChainMultiSig, error) {
	parsed, err := ManyChainMultiSigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ManyChainMultiSigBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ManyChainMultiSig{address: address, abi: *parsed, ManyChainMultiSigCaller: ManyChainMultiSigCaller{contract: contract}, ManyChainMultiSigTransactor: ManyChainMultiSigTransactor{contract: contract}, ManyChainMultiSigFilterer: ManyChainMultiSigFilterer{contract: contract}}, nil
}

type ManyChainMultiSig struct {
	address common.Address
	abi     abi.ABI
	ManyChainMultiSigCaller
	ManyChainMultiSigTransactor
	ManyChainMultiSigFilterer
}

type ManyChainMultiSigCaller struct {
	contract *bind.BoundContract
}

type ManyChainMultiSigTransactor struct {
	contract *bind.BoundContract
}

type ManyChainMultiSigFilterer struct {
	contract *bind.BoundContract
}

type ManyChainMultiSigSession struct {
	Contract     *ManyChainMultiSig
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type ManyChainMultiSigCallerSession struct {
	Contract *ManyChainMultiSigCaller
	CallOpts bind.CallOpts
}

type ManyChainMultiSigTransactorSession struct {
	Contract     *ManyChainMultiSigTransactor
	TransactOpts bind.TransactOpts
}

type ManyChainMultiSigRaw struct {
	Contract *ManyChainMultiSig
}

type ManyChainMultiSigCallerRaw struct {
	Contract *ManyChainMultiSigCaller
}

type ManyChainMultiSigTransactorRaw struct {
	Contract *ManyChainMultiSigTransactor
}

func NewManyChainMultiSig(address common.Address, backend bind.ContractBackend) (*ManyChainMultiSig, error) {
	abi, err := abi.JSON(strings.NewReader(ManyChainMultiSigABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindManyChainMultiSig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSig{address: address, abi: abi, ManyChainMultiSigCaller: ManyChainMultiSigCaller{contract: contract}, ManyChainMultiSigTransactor: ManyChainMultiSigTransactor{contract: contract}, ManyChainMultiSigFilterer: ManyChainMultiSigFilterer{contract: contract}}, nil
}

func NewManyChainMultiSigCaller(address common.Address, caller bind.ContractCaller) (*ManyChainMultiSigCaller, error) {
	contract, err := bindManyChainMultiSig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigCaller{contract: contract}, nil
}

func NewManyChainMultiSigTransactor(address common.Address, transactor bind.ContractTransactor) (*ManyChainMultiSigTransactor, error) {
	contract, err := bindManyChainMultiSig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigTransactor{contract: contract}, nil
}

func NewManyChainMultiSigFilterer(address common.Address, filterer bind.ContractFilterer) (*ManyChainMultiSigFilterer, error) {
	contract, err := bindManyChainMultiSig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigFilterer{contract: contract}, nil
}

func bindManyChainMultiSig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ManyChainMultiSigMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_ManyChainMultiSig *ManyChainMultiSigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ManyChainMultiSig.Contract.ManyChainMultiSigCaller.contract.Call(opts, result, method, params...)
}

func (_ManyChainMultiSig *ManyChainMultiSigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.ManyChainMultiSigTransactor.contract.Transfer(opts)
}

func (_ManyChainMultiSig *ManyChainMultiSigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.ManyChainMultiSigTransactor.contract.Transact(opts, method, params...)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ManyChainMultiSig.Contract.contract.Call(opts, result, method, params...)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.contract.Transfer(opts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.contract.Transact(opts, method, params...)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) MAXNUMSIGNERS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "MAX_NUM_SIGNERS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) MAXNUMSIGNERS() (uint8, error) {
	return _ManyChainMultiSig.Contract.MAXNUMSIGNERS(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) MAXNUMSIGNERS() (uint8, error) {
	return _ManyChainMultiSig.Contract.MAXNUMSIGNERS(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) NUMGROUPS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "NUM_GROUPS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) NUMGROUPS() (uint8, error) {
	return _ManyChainMultiSig.Contract.NUMGROUPS(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) NUMGROUPS() (uint8, error) {
	return _ManyChainMultiSig.Contract.NUMGROUPS(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) GetConfig(opts *bind.CallOpts) (ManyChainMultiSigConfig, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(ManyChainMultiSigConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ManyChainMultiSigConfig)).(*ManyChainMultiSigConfig)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) GetConfig() (ManyChainMultiSigConfig, error) {
	return _ManyChainMultiSig.Contract.GetConfig(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) GetConfig() (ManyChainMultiSigConfig, error) {
	return _ManyChainMultiSig.Contract.GetConfig(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) GetOpCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "getOpCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) GetOpCount() (*big.Int, error) {
	return _ManyChainMultiSig.Contract.GetOpCount(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) GetOpCount() (*big.Int, error) {
	return _ManyChainMultiSig.Contract.GetOpCount(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) GetRoot(opts *bind.CallOpts) (GetRoot,

	error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "getRoot")

	outstruct := new(GetRoot)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.ValidUntil = *abi.ConvertType(out[1], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) GetRoot() (GetRoot,

	error) {
	return _ManyChainMultiSig.Contract.GetRoot(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) GetRoot() (GetRoot,

	error) {
	return _ManyChainMultiSig.Contract.GetRoot(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) GetRootMetadata(opts *bind.CallOpts) (ManyChainMultiSigRootMetadata, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "getRootMetadata")

	if err != nil {
		return *new(ManyChainMultiSigRootMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(ManyChainMultiSigRootMetadata)).(*ManyChainMultiSigRootMetadata)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) GetRootMetadata() (ManyChainMultiSigRootMetadata, error) {
	return _ManyChainMultiSig.Contract.GetRootMetadata(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) GetRootMetadata() (ManyChainMultiSigRootMetadata, error) {
	return _ManyChainMultiSig.Contract.GetRootMetadata(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) Owner() (common.Address, error) {
	return _ManyChainMultiSig.Contract.Owner(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) Owner() (common.Address, error) {
	return _ManyChainMultiSig.Contract.Owner(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ManyChainMultiSig.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ManyChainMultiSig *ManyChainMultiSigSession) PendingOwner() (common.Address, error) {
	return _ManyChainMultiSig.Contract.PendingOwner(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigCallerSession) PendingOwner() (common.Address, error) {
	return _ManyChainMultiSig.Contract.PendingOwner(&_ManyChainMultiSig.CallOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.Transact(opts, "acceptOwnership")
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) AcceptOwnership() (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.AcceptOwnership(&_ManyChainMultiSig.TransactOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.AcceptOwnership(&_ManyChainMultiSig.TransactOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) Execute(opts *bind.TransactOpts, op ManyChainMultiSigOp, proof [][32]byte) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.Transact(opts, "execute", op, proof)
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) Execute(op ManyChainMultiSigOp, proof [][32]byte) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.Execute(&_ManyChainMultiSig.TransactOpts, op, proof)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) Execute(op ManyChainMultiSigOp, proof [][32]byte) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.Execute(&_ManyChainMultiSig.TransactOpts, op, proof)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.Transact(opts, "renounceOwnership")
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) RenounceOwnership() (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.RenounceOwnership(&_ManyChainMultiSig.TransactOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.RenounceOwnership(&_ManyChainMultiSig.TransactOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) SetConfig(opts *bind.TransactOpts, signerAddresses []common.Address, signerGroups []uint8, groupQuorums [32]uint8, groupParents [32]uint8, clearRoot bool) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.Transact(opts, "setConfig", signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) SetConfig(signerAddresses []common.Address, signerGroups []uint8, groupQuorums [32]uint8, groupParents [32]uint8, clearRoot bool) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.SetConfig(&_ManyChainMultiSig.TransactOpts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) SetConfig(signerAddresses []common.Address, signerGroups []uint8, groupQuorums [32]uint8, groupParents [32]uint8, clearRoot bool) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.SetConfig(&_ManyChainMultiSig.TransactOpts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) SetRoot(opts *bind.TransactOpts, root [32]byte, validUntil uint32, metadata ManyChainMultiSigRootMetadata, metadataProof [][32]byte, signatures []ManyChainMultiSigSignature) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.Transact(opts, "setRoot", root, validUntil, metadata, metadataProof, signatures)
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) SetRoot(root [32]byte, validUntil uint32, metadata ManyChainMultiSigRootMetadata, metadataProof [][32]byte, signatures []ManyChainMultiSigSignature) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.SetRoot(&_ManyChainMultiSig.TransactOpts, root, validUntil, metadata, metadataProof, signatures)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) SetRoot(root [32]byte, validUntil uint32, metadata ManyChainMultiSigRootMetadata, metadataProof [][32]byte, signatures []ManyChainMultiSigSignature) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.SetRoot(&_ManyChainMultiSig.TransactOpts, root, validUntil, metadata, metadataProof, signatures)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.TransferOwnership(&_ManyChainMultiSig.TransactOpts, newOwner)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.TransferOwnership(&_ManyChainMultiSig.TransactOpts, newOwner)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ManyChainMultiSig.contract.RawTransact(opts, nil)
}

func (_ManyChainMultiSig *ManyChainMultiSigSession) Receive() (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.Receive(&_ManyChainMultiSig.TransactOpts)
}

func (_ManyChainMultiSig *ManyChainMultiSigTransactorSession) Receive() (*types.Transaction, error) {
	return _ManyChainMultiSig.Contract.Receive(&_ManyChainMultiSig.TransactOpts)
}

type ManyChainMultiSigConfigSetIterator struct {
	Event *ManyChainMultiSigConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ManyChainMultiSigConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManyChainMultiSigConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ManyChainMultiSigConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ManyChainMultiSigConfigSetIterator) Error() error {
	return it.fail
}

func (it *ManyChainMultiSigConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ManyChainMultiSigConfigSet struct {
	Config        ManyChainMultiSigConfig
	IsRootCleared bool
	Raw           types.Log
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) FilterConfigSet(opts *bind.FilterOpts) (*ManyChainMultiSigConfigSetIterator, error) {

	logs, sub, err := _ManyChainMultiSig.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigConfigSetIterator{contract: _ManyChainMultiSig.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigConfigSet) (event.Subscription, error) {

	logs, sub, err := _ManyChainMultiSig.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ManyChainMultiSigConfigSet)
				if err := _ManyChainMultiSig.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) ParseConfigSet(log types.Log) (*ManyChainMultiSigConfigSet, error) {
	event := new(ManyChainMultiSigConfigSet)
	if err := _ManyChainMultiSig.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ManyChainMultiSigNewRootIterator struct {
	Event *ManyChainMultiSigNewRoot

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ManyChainMultiSigNewRootIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManyChainMultiSigNewRoot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ManyChainMultiSigNewRoot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ManyChainMultiSigNewRootIterator) Error() error {
	return it.fail
}

func (it *ManyChainMultiSigNewRootIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ManyChainMultiSigNewRoot struct {
	Root       [32]byte
	ValidUntil uint32
	Metadata   ManyChainMultiSigRootMetadata
	Raw        types.Log
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) FilterNewRoot(opts *bind.FilterOpts, root [][32]byte) (*ManyChainMultiSigNewRootIterator, error) {

	var rootRule []interface{}
	for _, rootItem := range root {
		rootRule = append(rootRule, rootItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.FilterLogs(opts, "NewRoot", rootRule)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigNewRootIterator{contract: _ManyChainMultiSig.contract, event: "NewRoot", logs: logs, sub: sub}, nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) WatchNewRoot(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigNewRoot, root [][32]byte) (event.Subscription, error) {

	var rootRule []interface{}
	for _, rootItem := range root {
		rootRule = append(rootRule, rootItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.WatchLogs(opts, "NewRoot", rootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ManyChainMultiSigNewRoot)
				if err := _ManyChainMultiSig.contract.UnpackLog(event, "NewRoot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) ParseNewRoot(log types.Log) (*ManyChainMultiSigNewRoot, error) {
	event := new(ManyChainMultiSigNewRoot)
	if err := _ManyChainMultiSig.contract.UnpackLog(event, "NewRoot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ManyChainMultiSigOpExecutedIterator struct {
	Event *ManyChainMultiSigOpExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ManyChainMultiSigOpExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManyChainMultiSigOpExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ManyChainMultiSigOpExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ManyChainMultiSigOpExecutedIterator) Error() error {
	return it.fail
}

func (it *ManyChainMultiSigOpExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ManyChainMultiSigOpExecuted struct {
	Nonce *big.Int
	To    common.Address
	Data  []byte
	Value *big.Int
	Raw   types.Log
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) FilterOpExecuted(opts *bind.FilterOpts, nonce []*big.Int) (*ManyChainMultiSigOpExecutedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.FilterLogs(opts, "OpExecuted", nonceRule)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigOpExecutedIterator{contract: _ManyChainMultiSig.contract, event: "OpExecuted", logs: logs, sub: sub}, nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) WatchOpExecuted(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigOpExecuted, nonce []*big.Int) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.WatchLogs(opts, "OpExecuted", nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ManyChainMultiSigOpExecuted)
				if err := _ManyChainMultiSig.contract.UnpackLog(event, "OpExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) ParseOpExecuted(log types.Log) (*ManyChainMultiSigOpExecuted, error) {
	event := new(ManyChainMultiSigOpExecuted)
	if err := _ManyChainMultiSig.contract.UnpackLog(event, "OpExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ManyChainMultiSigOwnershipTransferStartedIterator struct {
	Event *ManyChainMultiSigOwnershipTransferStarted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ManyChainMultiSigOwnershipTransferStartedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManyChainMultiSigOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ManyChainMultiSigOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ManyChainMultiSigOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

func (it *ManyChainMultiSigOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ManyChainMultiSigOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManyChainMultiSigOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigOwnershipTransferStartedIterator{contract: _ManyChainMultiSig.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ManyChainMultiSigOwnershipTransferStarted)
				if err := _ManyChainMultiSig.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) ParseOwnershipTransferStarted(log types.Log) (*ManyChainMultiSigOwnershipTransferStarted, error) {
	event := new(ManyChainMultiSigOwnershipTransferStarted)
	if err := _ManyChainMultiSig.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ManyChainMultiSigOwnershipTransferredIterator struct {
	Event *ManyChainMultiSigOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ManyChainMultiSigOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManyChainMultiSigOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ManyChainMultiSigOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ManyChainMultiSigOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *ManyChainMultiSigOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ManyChainMultiSigOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManyChainMultiSigOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ManyChainMultiSigOwnershipTransferredIterator{contract: _ManyChainMultiSig.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ManyChainMultiSig.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ManyChainMultiSigOwnershipTransferred)
				if err := _ManyChainMultiSig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ManyChainMultiSig *ManyChainMultiSigFilterer) ParseOwnershipTransferred(log types.Log) (*ManyChainMultiSigOwnershipTransferred, error) {
	event := new(ManyChainMultiSigOwnershipTransferred)
	if err := _ManyChainMultiSig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetRoot struct {
	Root       [32]byte
	ValidUntil uint32
}

func (_ManyChainMultiSig *ManyChainMultiSig) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _ManyChainMultiSig.abi.Events["ConfigSet"].ID:
		return _ManyChainMultiSig.ParseConfigSet(log)
	case _ManyChainMultiSig.abi.Events["NewRoot"].ID:
		return _ManyChainMultiSig.ParseNewRoot(log)
	case _ManyChainMultiSig.abi.Events["OpExecuted"].ID:
		return _ManyChainMultiSig.ParseOpExecuted(log)
	case _ManyChainMultiSig.abi.Events["OwnershipTransferStarted"].ID:
		return _ManyChainMultiSig.ParseOwnershipTransferStarted(log)
	case _ManyChainMultiSig.abi.Events["OwnershipTransferred"].ID:
		return _ManyChainMultiSig.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (ManyChainMultiSigConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0a4974ad206b9c736f9ab2feac1c9b1d043fe4ef377c70ae45659f2ef089f03e")
}

func (ManyChainMultiSigNewRoot) Topic() common.Hash {
	return common.HexToHash("0x7ea643ae44677f24e0d6f40168893712daaf729b0a38fe7702d21cb544c84101")
}

func (ManyChainMultiSigOpExecuted) Topic() common.Hash {
	return common.HexToHash("0x87d58fdd48be753fb9ef4ec8a5895086c401506da8b4d752abc90602c3e62d1d")
}

func (ManyChainMultiSigOwnershipTransferStarted) Topic() common.Hash {
	return common.HexToHash("0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700")
}

func (ManyChainMultiSigOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_ManyChainMultiSig *ManyChainMultiSig) Address() common.Address {
	return _ManyChainMultiSig.address
}

type ManyChainMultiSigInterface interface {
	MAXNUMSIGNERS(opts *bind.CallOpts) (uint8, error)

	NUMGROUPS(opts *bind.CallOpts) (uint8, error)

	GetConfig(opts *bind.CallOpts) (ManyChainMultiSigConfig, error)

	GetOpCount(opts *bind.CallOpts) (*big.Int, error)

	GetRoot(opts *bind.CallOpts) (GetRoot,

		error)

	GetRootMetadata(opts *bind.CallOpts) (ManyChainMultiSigRootMetadata, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PendingOwner(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Execute(opts *bind.TransactOpts, op ManyChainMultiSigOp, proof [][32]byte) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signerAddresses []common.Address, signerGroups []uint8, groupQuorums [32]uint8, groupParents [32]uint8, clearRoot bool) (*types.Transaction, error)

	SetRoot(opts *bind.TransactOpts, root [32]byte, validUntil uint32, metadata ManyChainMultiSigRootMetadata, metadataProof [][32]byte, signatures []ManyChainMultiSigSignature) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*ManyChainMultiSigConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*ManyChainMultiSigConfigSet, error)

	FilterNewRoot(opts *bind.FilterOpts, root [][32]byte) (*ManyChainMultiSigNewRootIterator, error)

	WatchNewRoot(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigNewRoot, root [][32]byte) (event.Subscription, error)

	ParseNewRoot(log types.Log) (*ManyChainMultiSigNewRoot, error)

	FilterOpExecuted(opts *bind.FilterOpts, nonce []*big.Int) (*ManyChainMultiSigOpExecutedIterator, error)

	WatchOpExecuted(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigOpExecuted, nonce []*big.Int) (event.Subscription, error)

	ParseOpExecuted(log types.Log) (*ManyChainMultiSigOpExecuted, error)

	FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManyChainMultiSigOwnershipTransferStartedIterator, error)

	WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferStarted(log types.Log) (*ManyChainMultiSigOwnershipTransferStarted, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManyChainMultiSigOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ManyChainMultiSigOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*ManyChainMultiSigOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
