// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rbac_timelock_wrapper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type RBACTimelockCall struct {
	Target common.Address
	Value  *big.Int
	Data   []byte
}

var RBACTimelockMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"proposers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cancellers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bypassers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"BypasserCallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"FunctionSelectorBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"FunctionSelectorUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BYPASSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCELLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"blockFunctionSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structRBACTimelock.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"bypasserExecuteBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structRBACTimelock.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBlockedFunctionSelectorAt\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockedFunctionSelectorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structRBACTimelock.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structRBACTimelock.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"scheduleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"unblockFunctionSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002fcf38038062002fcf833981016040819052620000349162000533565b6200004f60008051602062002f8f83398151915280620002bb565b6200007960008051602062002f4f83398151915260008051602062002f8f833981519152620002bb565b620000a360008051602062002f6f83398151915260008051602062002f8f833981519152620002bb565b620000cd60008051602062002faf83398151915260008051602062002f8f833981519152620002bb565b620001087fa1b2b8005de234c4b8ce8cd0be058239056e0d54f6097825b5117101469d5a8d60008051602062002f8f833981519152620002bb565b6200012360008051602062002f8f8339815191528662000306565b60005b845181101562000180576200016d60008051602062002f4f83398151915286838151811062000159576200015962000608565b60200260200101516200030660201b60201c565b62000178816200061e565b905062000126565b5060005b8351811015620001ca57620001b760008051602062002f6f83398151915285838151811062000159576200015962000608565b620001c2816200061e565b905062000184565b5060005b825181101562000214576200020160008051602062002faf83398151915284838151811062000159576200015962000608565b6200020c816200061e565b9050620001ce565b5060005b81518110156200026f576200025c7fa1b2b8005de234c4b8ce8cd0be058239056e0d54f6097825b5117101469d5a8d83838151811062000159576200015962000608565b62000267816200061e565b905062000218565b5060038690556040805160008152602081018890527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a150505050505062000646565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000312828262000316565b5050565b62000322828262000341565b60008281526001602052604090206200033c9082620003e1565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000312576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200039d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620003f8836001600160a01b03841662000401565b90505b92915050565b60008181526001830160205260408120546200044a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620003fb565b506000620003fb565b80516001600160a01b03811681146200046b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200049857600080fd5b815160206001600160401b0380831115620004b757620004b762000470565b8260051b604051601f19603f83011681018181108482111715620004df57620004df62000470565b604052938452858101830193838101925087851115620004fe57600080fd5b83870191505b848210156200052857620005188262000453565b8352918301919083019062000504565b979650505050505050565b60008060008060008060c087890312156200054d57600080fd5b865195506200055f6020880162000453565b60408801519095506001600160401b03808211156200057d57600080fd5b6200058b8a838b0162000486565b95506060890151915080821115620005a257600080fd5b620005b08a838b0162000486565b94506080890151915080821115620005c757600080fd5b620005d58a838b0162000486565b935060a0890151915080821115620005ec57600080fd5b50620005fb89828a0162000486565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6000600182016200063f57634e487b7160e01b600052601160045260246000fd5b5060010190565b6128f980620006566000396000f3fe6080604052600436106102025760003560e01c806364d623531161011d578063a944142d116100b0578063ca15c8731161007f578063d547741f11610064578063d547741f14610724578063f23a6e6114610744578063f27a0c921461078957600080fd5b8063ca15c873146106d7578063d45c4435146106f757600080fd5b8063a944142d1461061e578063b08e51c01461063e578063bc197c8114610672578063c4d252f5146106b757600080fd5b80639010d07c116100ec5780639010d07c1461055357806391d14854146105985780639f5a23f7146105e9578063a217fddf1461060957600080fd5b806364d62353146104b85780636ceef480146104d857806375b238fc146104eb5780638f61f4f51461051f57600080fd5b806326bb2ec51161019557806336568abe1161016457806336568abe146104385780633a98b4e414610458578063515a3db314610478578063584b153e1461049857600080fd5b806326bb2ec5146103b35780632ab0f529146103c85780632f2ff15d146103f857806331d507501461041857600080fd5b806313bc9f20116101d157806313bc9f20146102eb578063150b7a021461030b578063191cb7b31461034f578063248a9ca31461038357600080fd5b806301ffc9a71461020e57806303e561551461024357806307bd0265146102945780630db866b1146102d657600080fd5b3661020957005b600080fd5b34801561021a57600080fd5b5061022e610229366004611e44565b61079e565b60405190151581526020015b60405180910390f35b34801561024f57600080fd5b5061026361025e366004611e86565b6107fa565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161023a565b3480156102a057600080fd5b506102c87fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60405190815260200161023a565b6102e96102e4366004611eeb565b610807565b005b3480156102f757600080fd5b5061022e610306366004611e86565b61097e565b34801561031757600080fd5b50610263610326366004612062565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b34801561035b57600080fd5b506102c87fa1b2b8005de234c4b8ce8cd0be058239056e0d54f6097825b5117101469d5a8d81565b34801561038f57600080fd5b506102c861039e366004611e86565b60009081526020819052604090206001015490565b3480156103bf57600080fd5b506102c86109a4565b3480156103d457600080fd5b5061022e6103e3366004611e86565b60009081526002602052604090205460011490565b34801561040457600080fd5b506102e96104133660046120ca565b6109b5565b34801561042457600080fd5b5061022e610433366004611e86565b6109df565b34801561044457600080fd5b506102e96104533660046120ca565b6109f8565b34801561046457600080fd5b506102e9610473366004611e44565b610ab0565b34801561048457600080fd5b506102c86104933660046120f6565b610b5d565b3480156104a457600080fd5b5061022e6104b3366004611e86565b610b96565b3480156104c457600080fd5b506102e96104d3366004611e86565b610bad565b6102e96104e63660046120f6565b610c19565b3480156104f757600080fd5b506102c87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561052b57600080fd5b506102c87fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc181565b34801561055f57600080fd5b5061057361056e366004612147565b610da0565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161023a565b3480156105a457600080fd5b5061022e6105b33660046120ca565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156105f557600080fd5b506102e9610604366004611e44565b610db8565b34801561061557600080fd5b506102c8600081565b34801561062a57600080fd5b506102e9610639366004612169565b610e65565b34801561064a57600080fd5b506102c87ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78381565b34801561067e57600080fd5b5061026361068d366004612243565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b3480156106c357600080fd5b506102e96106d2366004611e86565b61100f565b3480156106e357600080fd5b506102c86106f2366004611e86565b611144565b34801561070357600080fd5b506102c8610712366004611e86565b60009081526002602052604090205490565b34801561073057600080fd5b506102e961073f3660046120ca565b61115b565b34801561075057600080fd5b5061026361075f3660046122ed565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561079557600080fd5b506003546102c8565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e00000000000000000000000000000000000000000000000000000000014806107f457506107f482611180565b92915050565b60006107f46004836111d6565b3360008181527f7d7ffb7a348e1c6a02869081a26547b49160dd3df72d1d75a570eb9b698292ec60205260409020547fa1b2b8005de234c4b8ce8cd0be058239056e0d54f6097825b5117101469d5a8d919060ff1661086a5761086a82826111e2565b60005b83811015610977576108a185858381811061088a5761088a612352565b905060200281019061089c9190612381565b61129a565b807f6b983f337bab73dfe37faca733adf3ea35b45b8b144ec8ee2de3a1b224564b0c8686848181106108d5576108d5612352565b90506020028101906108e79190612381565b6108f59060208101906123bf565b87878581811061090757610907612352565b90506020028101906109199190612381565b6020013588888681811061092f5761092f612352565b90506020028101906109419190612381565b61094f9060408101906123da565b60405161095f9493929190612488565b60405180910390a2610970816124f7565b905061086d565b5050505050565b60008181526002602052604081205460018111801561099d5750428111155b9392505050565b60006109b060046113b2565b905090565b6000828152602081905260409020600101546109d0816113bc565b6109da83836113c9565b505050565b60008181526002602052604081205481905b1192915050565b73ffffffffffffffffffffffffffffffffffffffff81163314610aa2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610aac82826113eb565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610ada816113bc565b610b0760047fffffffff00000000000000000000000000000000000000000000000000000000841661140d565b15610aac576040517fffffffff000000000000000000000000000000000000000000000000000000008316907fd91859a8d88193a56a2983deb65a5253985141c49c70bf016880b5243bd432e190600090a25050565b600084848484604051602001610b76949392919061252f565b604051602081830303815290604052805190602001209050949350505050565b6000818152600260205260408120546001906109f1565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610bd7816113bc565b60035460408051918252602082018490527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a150600355565b3360008181527f7d7ffb7a348e1c6a02869081a26547b49160dd3df72d1d75a570eb9b698292ec60205260409020547fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63919060ff16610c7c57610c7c82826111e2565b6000610c8a87878787610b5d565b9050610c968186611419565b60005b86811015610d8d57610cb688888381811061088a5761088a612352565b80827fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588a8a85818110610ceb57610ceb612352565b9050602002810190610cfd9190612381565b610d0b9060208101906123bf565b8b8b86818110610d1d57610d1d612352565b9050602002810190610d2f9190612381565b602001358c8c87818110610d4557610d45612352565b9050602002810190610d579190612381565b610d659060408101906123da565b604051610d759493929190612488565b60405180910390a3610d86816124f7565b9050610c99565b50610d978161152e565b50505050505050565b600082815260016020526040812061099d90836111d6565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610de2816113bc565b610e0f60047fffffffff0000000000000000000000000000000000000000000000000000000084166115d6565b15610aac576040517fffffffff000000000000000000000000000000000000000000000000000000008316907f15b40cf8ed4c95cd3c0e1dedfdb3987c3f9bf3d3770d13ddf6dc4daa5ffae9ef90600090a25050565b3360008181527f7d7ffb7a348e1c6a02869081a26547b49160dd3df72d1d75a570eb9b698292ec60205260409020547fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1919060ff16610ec857610ec882826111e2565b6000610ed688888888610b5d565b9050610ee281856115e2565b60005b8781101561100457610f27898983818110610f0257610f02612352565b9050602002810190610f149190612381565b610f229060408101906123da565b611704565b80827f4f4da6666f52e3b6dbc3638d8eae4017722678fe58bca79cd8320817807a65be8b8b85818110610f5c57610f5c612352565b9050602002810190610f6e9190612381565b610f7c9060208101906123bf565b8c8c86818110610f8e57610f8e612352565b9050602002810190610fa09190612381565b602001358d8d87818110610fb657610fb6612352565b9050602002810190610fc89190612381565b610fd69060408101906123da565b8d8d8d604051610fec979695949392919061267e565b60405180910390a3610ffd816124f7565b9050610ee5565b505050505050505050565b3360008181527f7d7ffb7a348e1c6a02869081a26547b49160dd3df72d1d75a570eb9b698292ec60205260409020547ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783919060ff166110725761107282826111e2565b61107b83610b96565b611107576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5242414354696d656c6f636b3a206f7065726174696f6e2063616e6e6f74206260448201527f652063616e63656c6c65640000000000000000000000000000000000000000006064820152608401610a99565b6000838152600260205260408082208290555184917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a2505050565b60008181526001602052604081206107f4906113b2565b600082815260208190526040902060010154611176816113bc565b6109da83836113eb565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806107f457506107f4826117f8565b600061099d838361188f565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610aac57611220816118b9565b61122b8360206118d8565b60405160200161123c9291906126f7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610a9991600401612778565b60006112a960208301836123bf565b73ffffffffffffffffffffffffffffffffffffffff1660208301356112d160408501856123da565b6040516112df9291906127c9565b60006040518083038185875af1925050503d806000811461131c576040519150601f19603f3d011682016040523d82523d6000602084013e611321565b606091505b5050905080610aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5242414354696d656c6f636b3a20756e6465726c79696e67207472616e73616360448201527f74696f6e207265766572746564000000000000000000000000000000000000006064820152608401610a99565b60006107f4825490565b6113c681336111e2565b50565b6113d38282611b1b565b60008281526001602052604090206109da9082611c0b565b6113f58282611c2d565b60008281526001602052604090206109da9082611ce4565b600061099d8383611d02565b6114228261097e565b6114ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5242414354696d656c6f636b3a206f7065726174696f6e206973206e6f74207260448201527f65616479000000000000000000000000000000000000000000000000000000006064820152608401610a99565b8015806114c857506000818152600260205260409020546001145b610aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5242414354696d656c6f636b3a206d697373696e6720646570656e64656e63796044820152606401610a99565b6115378161097e565b6115c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5242414354696d656c6f636b3a206f7065726174696f6e206973206e6f74207260448201527f65616479000000000000000000000000000000000000000000000000000000006064820152608401610a99565b600090815260026020526040902060019055565b600061099d8383611df5565b6115eb826109df565b15611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5242414354696d656c6f636b3a206f7065726174696f6e20616c72656164792060448201527f7363686564756c656400000000000000000000000000000000000000000000006064820152608401610a99565b6003548110156116e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5242414354696d656c6f636b3a20696e73756666696369656e742064656c61796044820152606401610a99565b6116ee81426127d9565b6000928352600260205260409092209190915550565b6004811015611711575050565b600061172060048284866127ec565b61172991612816565b905061176b60047fffffffff0000000000000000000000000000000000000000000000000000000083166000818152600183016020526040812054151561099d565b156109da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5242414354696d656c6f636b3a2073656c6563746f7220697320626c6f636b6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610a99565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806107f457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146107f4565b60008260000182815481106118a6576118a6612352565b9060005260206000200154905092915050565b60606107f473ffffffffffffffffffffffffffffffffffffffff831660145b606060006118e783600261285e565b6118f29060026127d9565b67ffffffffffffffff81111561190a5761190a611f56565b6040519080825280601f01601f191660200182016040528015611934576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061196b5761196b612352565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119ce576119ce612352565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611a0a84600261285e565b611a159060016127d9565b90505b6001811115611ab2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a5657611a56612352565b1a60f81b828281518110611a6c57611a6c612352565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611aab81612875565b9050611a18565b50831561099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a99565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610aac5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611bad3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061099d8373ffffffffffffffffffffffffffffffffffffffff8416611df5565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610aac5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061099d8373ffffffffffffffffffffffffffffffffffffffff84165b60008181526001830160205260408120548015611deb576000611d266001836128aa565b8554909150600090611d3a906001906128aa565b9050818114611d9f576000866000018281548110611d5a57611d5a612352565b9060005260206000200154905080876000018481548110611d7d57611d7d612352565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611db057611db06128bd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107f4565b60009150506107f4565b6000818152600183016020526040812054611e3c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107f4565b5060006107f4565b600060208284031215611e5657600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461099d57600080fd5b600060208284031215611e9857600080fd5b5035919050565b60008083601f840112611eb157600080fd5b50813567ffffffffffffffff811115611ec957600080fd5b6020830191508360208260051b8501011115611ee457600080fd5b9250929050565b60008060208385031215611efe57600080fd5b823567ffffffffffffffff811115611f1557600080fd5b611f2185828601611e9f565b90969095509350505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611f5157600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611fcc57611fcc611f56565b604052919050565b600082601f830112611fe557600080fd5b813567ffffffffffffffff811115611fff57611fff611f56565b61203060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611f85565b81815284602083860101111561204557600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561207857600080fd5b61208185611f2d565b935061208f60208601611f2d565b925060408501359150606085013567ffffffffffffffff8111156120b257600080fd5b6120be87828801611fd4565b91505092959194509250565b600080604083850312156120dd57600080fd5b823591506120ed60208401611f2d565b90509250929050565b6000806000806060858703121561210c57600080fd5b843567ffffffffffffffff81111561212357600080fd5b61212f87828801611e9f565b90989097506020870135966040013595509350505050565b6000806040838503121561215a57600080fd5b50508035926020909101359150565b60008060008060006080868803121561218157600080fd5b853567ffffffffffffffff81111561219857600080fd5b6121a488828901611e9f565b9099909850602088013597604081013597506060013595509350505050565b600082601f8301126121d457600080fd5b8135602067ffffffffffffffff8211156121f0576121f0611f56565b8160051b6121ff828201611f85565b928352848101820192828101908785111561221957600080fd5b83870192505b848310156122385782358252918301919083019061221f565b979650505050505050565b600080600080600060a0868803121561225b57600080fd5b61226486611f2d565b945061227260208701611f2d565b9350604086013567ffffffffffffffff8082111561228f57600080fd5b61229b89838a016121c3565b945060608801359150808211156122b157600080fd5b6122bd89838a016121c3565b935060808801359150808211156122d357600080fd5b506122e088828901611fd4565b9150509295509295909350565b600080600080600060a0868803121561230557600080fd5b61230e86611f2d565b945061231c60208701611f2d565b93506040860135925060608601359150608086013567ffffffffffffffff81111561234657600080fd5b6122e088828901611fd4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126123b557600080fd5b9190910192915050565b6000602082840312156123d157600080fd5b61099d82611f2d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261240f57600080fd5b83018035915067ffffffffffffffff82111561242a57600080fd5b602001915036819003821315611ee457600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201526060604082015260006124be60608301848661243f565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612528576125286124c8565b5060010190565b60608082528181018590526000906080600587901b8401810190840188845b89811015612667577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087850301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18c36030181126125af57600080fd5b8b0173ffffffffffffffffffffffffffffffffffffffff6125cf82611f2d565b168552602080820135818701526040808301357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261261257600080fd5b90920181810192903567ffffffffffffffff81111561263057600080fd5b80360384131561263f57600080fd5b8882890152612651898901828661243f565b975050509384019392909201915060010161254e565b505050602084019590955250506040015292915050565b73ffffffffffffffffffffffffffffffffffffffff8816815286602082015260c0604082015260006126b460c08301878961243f565b606083019590955250608081019290925260a090910152949350505050565b60005b838110156126ee5781810151838201526020016126d6565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161272f8160178501602088016126d3565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161276c8160288401602088016126d3565b01602801949350505050565b60208152600082518060208401526127978160408501602087016126d3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8183823760009101908152919050565b808201808211156107f4576107f46124c8565b600080858511156127fc57600080fd5b8386111561280957600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156128565780818660040360031b1b83161692505b505092915050565b80820281158282048414176107f4576107f46124c8565b600081612884576128846124c8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b818103818111156107f4576107f46124c8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000813000ab09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775fd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
}

var RBACTimelockABI = RBACTimelockMetaData.ABI

var RBACTimelockBin = RBACTimelockMetaData.Bin

func DeployRBACTimelock(auth *bind.TransactOpts, backend bind.ContractBackend, minDelay *big.Int, admin common.Address, proposers []common.Address, executors []common.Address, cancellers []common.Address, bypassers []common.Address) (common.Address, *types.Transaction, *RBACTimelock, error) {
	parsed, err := RBACTimelockMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RBACTimelockBin), backend, minDelay, admin, proposers, executors, cancellers, bypassers)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RBACTimelock{address: address, abi: *parsed, RBACTimelockCaller: RBACTimelockCaller{contract: contract}, RBACTimelockTransactor: RBACTimelockTransactor{contract: contract}, RBACTimelockFilterer: RBACTimelockFilterer{contract: contract}}, nil
}

type RBACTimelock struct {
	address common.Address
	abi     abi.ABI
	RBACTimelockCaller
	RBACTimelockTransactor
	RBACTimelockFilterer
}

type RBACTimelockCaller struct {
	contract *bind.BoundContract
}

type RBACTimelockTransactor struct {
	contract *bind.BoundContract
}

type RBACTimelockFilterer struct {
	contract *bind.BoundContract
}

type RBACTimelockSession struct {
	Contract     *RBACTimelock
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type RBACTimelockCallerSession struct {
	Contract *RBACTimelockCaller
	CallOpts bind.CallOpts
}

type RBACTimelockTransactorSession struct {
	Contract     *RBACTimelockTransactor
	TransactOpts bind.TransactOpts
}

type RBACTimelockRaw struct {
	Contract *RBACTimelock
}

type RBACTimelockCallerRaw struct {
	Contract *RBACTimelockCaller
}

type RBACTimelockTransactorRaw struct {
	Contract *RBACTimelockTransactor
}

func NewRBACTimelock(address common.Address, backend bind.ContractBackend) (*RBACTimelock, error) {
	abi, err := abi.JSON(strings.NewReader(RBACTimelockABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindRBACTimelock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RBACTimelock{address: address, abi: abi, RBACTimelockCaller: RBACTimelockCaller{contract: contract}, RBACTimelockTransactor: RBACTimelockTransactor{contract: contract}, RBACTimelockFilterer: RBACTimelockFilterer{contract: contract}}, nil
}

func NewRBACTimelockCaller(address common.Address, caller bind.ContractCaller) (*RBACTimelockCaller, error) {
	contract, err := bindRBACTimelock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockCaller{contract: contract}, nil
}

func NewRBACTimelockTransactor(address common.Address, transactor bind.ContractTransactor) (*RBACTimelockTransactor, error) {
	contract, err := bindRBACTimelock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockTransactor{contract: contract}, nil
}

func NewRBACTimelockFilterer(address common.Address, filterer bind.ContractFilterer) (*RBACTimelockFilterer, error) {
	contract, err := bindRBACTimelock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockFilterer{contract: contract}, nil
}

func bindRBACTimelock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RBACTimelockMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_RBACTimelock *RBACTimelockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RBACTimelock.Contract.RBACTimelockCaller.contract.Call(opts, result, method, params...)
}

func (_RBACTimelock *RBACTimelockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RBACTimelock.Contract.RBACTimelockTransactor.contract.Transfer(opts)
}

func (_RBACTimelock *RBACTimelockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RBACTimelock.Contract.RBACTimelockTransactor.contract.Transact(opts, method, params...)
}

func (_RBACTimelock *RBACTimelockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RBACTimelock.Contract.contract.Call(opts, result, method, params...)
}

func (_RBACTimelock *RBACTimelockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RBACTimelock.Contract.contract.Transfer(opts)
}

func (_RBACTimelock *RBACTimelockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RBACTimelock.Contract.contract.Transact(opts, method, params...)
}

func (_RBACTimelock *RBACTimelockCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) ADMINROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.ADMINROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) ADMINROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.ADMINROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) BYPASSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "BYPASSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) BYPASSERROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.BYPASSERROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) BYPASSERROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.BYPASSERROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) CANCELLERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "CANCELLER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) CANCELLERROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.CANCELLERROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) CANCELLERROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.CANCELLERROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.DEFAULTADMINROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.DEFAULTADMINROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) EXECUTORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "EXECUTOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) EXECUTORROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.EXECUTORROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) EXECUTORROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.EXECUTORROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) PROPOSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "PROPOSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) PROPOSERROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.PROPOSERROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) PROPOSERROLE() ([32]byte, error) {
	return _RBACTimelock.Contract.PROPOSERROLE(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) GetBlockedFunctionSelectorAt(opts *bind.CallOpts, index *big.Int) ([4]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getBlockedFunctionSelectorAt", index)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetBlockedFunctionSelectorAt(index *big.Int) ([4]byte, error) {
	return _RBACTimelock.Contract.GetBlockedFunctionSelectorAt(&_RBACTimelock.CallOpts, index)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetBlockedFunctionSelectorAt(index *big.Int) ([4]byte, error) {
	return _RBACTimelock.Contract.GetBlockedFunctionSelectorAt(&_RBACTimelock.CallOpts, index)
}

func (_RBACTimelock *RBACTimelockCaller) GetBlockedFunctionSelectorCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getBlockedFunctionSelectorCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetBlockedFunctionSelectorCount() (*big.Int, error) {
	return _RBACTimelock.Contract.GetBlockedFunctionSelectorCount(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetBlockedFunctionSelectorCount() (*big.Int, error) {
	return _RBACTimelock.Contract.GetBlockedFunctionSelectorCount(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) GetMinDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getMinDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetMinDelay() (*big.Int, error) {
	return _RBACTimelock.Contract.GetMinDelay(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetMinDelay() (*big.Int, error) {
	return _RBACTimelock.Contract.GetMinDelay(&_RBACTimelock.CallOpts)
}

func (_RBACTimelock *RBACTimelockCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _RBACTimelock.Contract.GetRoleAdmin(&_RBACTimelock.CallOpts, role)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _RBACTimelock.Contract.GetRoleAdmin(&_RBACTimelock.CallOpts, role)
}

func (_RBACTimelock *RBACTimelockCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _RBACTimelock.Contract.GetRoleMember(&_RBACTimelock.CallOpts, role, index)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _RBACTimelock.Contract.GetRoleMember(&_RBACTimelock.CallOpts, role, index)
}

func (_RBACTimelock *RBACTimelockCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _RBACTimelock.Contract.GetRoleMemberCount(&_RBACTimelock.CallOpts, role)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _RBACTimelock.Contract.GetRoleMemberCount(&_RBACTimelock.CallOpts, role)
}

func (_RBACTimelock *RBACTimelockCaller) GetTimestamp(opts *bind.CallOpts, id [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "getTimestamp", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) GetTimestamp(id [32]byte) (*big.Int, error) {
	return _RBACTimelock.Contract.GetTimestamp(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCallerSession) GetTimestamp(id [32]byte) (*big.Int, error) {
	return _RBACTimelock.Contract.GetTimestamp(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _RBACTimelock.Contract.HasRole(&_RBACTimelock.CallOpts, role, account)
}

func (_RBACTimelock *RBACTimelockCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _RBACTimelock.Contract.HasRole(&_RBACTimelock.CallOpts, role, account)
}

func (_RBACTimelock *RBACTimelockCaller) HashOperationBatch(opts *bind.CallOpts, calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "hashOperationBatch", calls, predecessor, salt)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) HashOperationBatch(calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) ([32]byte, error) {
	return _RBACTimelock.Contract.HashOperationBatch(&_RBACTimelock.CallOpts, calls, predecessor, salt)
}

func (_RBACTimelock *RBACTimelockCallerSession) HashOperationBatch(calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) ([32]byte, error) {
	return _RBACTimelock.Contract.HashOperationBatch(&_RBACTimelock.CallOpts, calls, predecessor, salt)
}

func (_RBACTimelock *RBACTimelockCaller) IsOperation(opts *bind.CallOpts, id [32]byte) (bool, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "isOperation", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) IsOperation(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperation(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCallerSession) IsOperation(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperation(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCaller) IsOperationDone(opts *bind.CallOpts, id [32]byte) (bool, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "isOperationDone", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) IsOperationDone(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperationDone(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCallerSession) IsOperationDone(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperationDone(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCaller) IsOperationPending(opts *bind.CallOpts, id [32]byte) (bool, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "isOperationPending", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) IsOperationPending(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperationPending(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCallerSession) IsOperationPending(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperationPending(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCaller) IsOperationReady(opts *bind.CallOpts, id [32]byte) (bool, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "isOperationReady", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) IsOperationReady(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperationReady(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCallerSession) IsOperationReady(id [32]byte) (bool, error) {
	return _RBACTimelock.Contract.IsOperationReady(&_RBACTimelock.CallOpts, id)
}

func (_RBACTimelock *RBACTimelockCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _RBACTimelock.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_RBACTimelock *RBACTimelockSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _RBACTimelock.Contract.SupportsInterface(&_RBACTimelock.CallOpts, interfaceId)
}

func (_RBACTimelock *RBACTimelockCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _RBACTimelock.Contract.SupportsInterface(&_RBACTimelock.CallOpts, interfaceId)
}

func (_RBACTimelock *RBACTimelockTransactor) BlockFunctionSelector(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "blockFunctionSelector", selector)
}

func (_RBACTimelock *RBACTimelockSession) BlockFunctionSelector(selector [4]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.BlockFunctionSelector(&_RBACTimelock.TransactOpts, selector)
}

func (_RBACTimelock *RBACTimelockTransactorSession) BlockFunctionSelector(selector [4]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.BlockFunctionSelector(&_RBACTimelock.TransactOpts, selector)
}

func (_RBACTimelock *RBACTimelockTransactor) BypasserExecuteBatch(opts *bind.TransactOpts, calls []RBACTimelockCall) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "bypasserExecuteBatch", calls)
}

func (_RBACTimelock *RBACTimelockSession) BypasserExecuteBatch(calls []RBACTimelockCall) (*types.Transaction, error) {
	return _RBACTimelock.Contract.BypasserExecuteBatch(&_RBACTimelock.TransactOpts, calls)
}

func (_RBACTimelock *RBACTimelockTransactorSession) BypasserExecuteBatch(calls []RBACTimelockCall) (*types.Transaction, error) {
	return _RBACTimelock.Contract.BypasserExecuteBatch(&_RBACTimelock.TransactOpts, calls)
}

func (_RBACTimelock *RBACTimelockTransactor) Cancel(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "cancel", id)
}

func (_RBACTimelock *RBACTimelockSession) Cancel(id [32]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.Cancel(&_RBACTimelock.TransactOpts, id)
}

func (_RBACTimelock *RBACTimelockTransactorSession) Cancel(id [32]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.Cancel(&_RBACTimelock.TransactOpts, id)
}

func (_RBACTimelock *RBACTimelockTransactor) ExecuteBatch(opts *bind.TransactOpts, calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "executeBatch", calls, predecessor, salt)
}

func (_RBACTimelock *RBACTimelockSession) ExecuteBatch(calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.ExecuteBatch(&_RBACTimelock.TransactOpts, calls, predecessor, salt)
}

func (_RBACTimelock *RBACTimelockTransactorSession) ExecuteBatch(calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.ExecuteBatch(&_RBACTimelock.TransactOpts, calls, predecessor, salt)
}

func (_RBACTimelock *RBACTimelockTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "grantRole", role, account)
}

func (_RBACTimelock *RBACTimelockSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.Contract.GrantRole(&_RBACTimelock.TransactOpts, role, account)
}

func (_RBACTimelock *RBACTimelockTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.Contract.GrantRole(&_RBACTimelock.TransactOpts, role, account)
}

func (_RBACTimelock *RBACTimelockTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

func (_RBACTimelock *RBACTimelockSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.OnERC1155BatchReceived(&_RBACTimelock.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

func (_RBACTimelock *RBACTimelockTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.OnERC1155BatchReceived(&_RBACTimelock.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

func (_RBACTimelock *RBACTimelockTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

func (_RBACTimelock *RBACTimelockSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.OnERC1155Received(&_RBACTimelock.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

func (_RBACTimelock *RBACTimelockTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.OnERC1155Received(&_RBACTimelock.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

func (_RBACTimelock *RBACTimelockTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

func (_RBACTimelock *RBACTimelockSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.OnERC721Received(&_RBACTimelock.TransactOpts, arg0, arg1, arg2, arg3)
}

func (_RBACTimelock *RBACTimelockTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.OnERC721Received(&_RBACTimelock.TransactOpts, arg0, arg1, arg2, arg3)
}

func (_RBACTimelock *RBACTimelockTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "renounceRole", role, account)
}

func (_RBACTimelock *RBACTimelockSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.Contract.RenounceRole(&_RBACTimelock.TransactOpts, role, account)
}

func (_RBACTimelock *RBACTimelockTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.Contract.RenounceRole(&_RBACTimelock.TransactOpts, role, account)
}

func (_RBACTimelock *RBACTimelockTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "revokeRole", role, account)
}

func (_RBACTimelock *RBACTimelockSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.Contract.RevokeRole(&_RBACTimelock.TransactOpts, role, account)
}

func (_RBACTimelock *RBACTimelockTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RBACTimelock.Contract.RevokeRole(&_RBACTimelock.TransactOpts, role, account)
}

func (_RBACTimelock *RBACTimelockTransactor) ScheduleBatch(opts *bind.TransactOpts, calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte, delay *big.Int) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "scheduleBatch", calls, predecessor, salt, delay)
}

func (_RBACTimelock *RBACTimelockSession) ScheduleBatch(calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte, delay *big.Int) (*types.Transaction, error) {
	return _RBACTimelock.Contract.ScheduleBatch(&_RBACTimelock.TransactOpts, calls, predecessor, salt, delay)
}

func (_RBACTimelock *RBACTimelockTransactorSession) ScheduleBatch(calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte, delay *big.Int) (*types.Transaction, error) {
	return _RBACTimelock.Contract.ScheduleBatch(&_RBACTimelock.TransactOpts, calls, predecessor, salt, delay)
}

func (_RBACTimelock *RBACTimelockTransactor) UnblockFunctionSelector(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "unblockFunctionSelector", selector)
}

func (_RBACTimelock *RBACTimelockSession) UnblockFunctionSelector(selector [4]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.UnblockFunctionSelector(&_RBACTimelock.TransactOpts, selector)
}

func (_RBACTimelock *RBACTimelockTransactorSession) UnblockFunctionSelector(selector [4]byte) (*types.Transaction, error) {
	return _RBACTimelock.Contract.UnblockFunctionSelector(&_RBACTimelock.TransactOpts, selector)
}

func (_RBACTimelock *RBACTimelockTransactor) UpdateDelay(opts *bind.TransactOpts, newDelay *big.Int) (*types.Transaction, error) {
	return _RBACTimelock.contract.Transact(opts, "updateDelay", newDelay)
}

func (_RBACTimelock *RBACTimelockSession) UpdateDelay(newDelay *big.Int) (*types.Transaction, error) {
	return _RBACTimelock.Contract.UpdateDelay(&_RBACTimelock.TransactOpts, newDelay)
}

func (_RBACTimelock *RBACTimelockTransactorSession) UpdateDelay(newDelay *big.Int) (*types.Transaction, error) {
	return _RBACTimelock.Contract.UpdateDelay(&_RBACTimelock.TransactOpts, newDelay)
}

func (_RBACTimelock *RBACTimelockTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RBACTimelock.contract.RawTransact(opts, nil)
}

func (_RBACTimelock *RBACTimelockSession) Receive() (*types.Transaction, error) {
	return _RBACTimelock.Contract.Receive(&_RBACTimelock.TransactOpts)
}

func (_RBACTimelock *RBACTimelockTransactorSession) Receive() (*types.Transaction, error) {
	return _RBACTimelock.Contract.Receive(&_RBACTimelock.TransactOpts)
}

type RBACTimelockBypasserCallExecutedIterator struct {
	Event *RBACTimelockBypasserCallExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockBypasserCallExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockBypasserCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockBypasserCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockBypasserCallExecutedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockBypasserCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockBypasserCallExecuted struct {
	Index  *big.Int
	Target common.Address
	Value  *big.Int
	Data   []byte
	Raw    types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterBypasserCallExecuted(opts *bind.FilterOpts, index []*big.Int) (*RBACTimelockBypasserCallExecutedIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "BypasserCallExecuted", indexRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockBypasserCallExecutedIterator{contract: _RBACTimelock.contract, event: "BypasserCallExecuted", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchBypasserCallExecuted(opts *bind.WatchOpts, sink chan<- *RBACTimelockBypasserCallExecuted, index []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "BypasserCallExecuted", indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockBypasserCallExecuted)
				if err := _RBACTimelock.contract.UnpackLog(event, "BypasserCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseBypasserCallExecuted(log types.Log) (*RBACTimelockBypasserCallExecuted, error) {
	event := new(RBACTimelockBypasserCallExecuted)
	if err := _RBACTimelock.contract.UnpackLog(event, "BypasserCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockCallExecutedIterator struct {
	Event *RBACTimelockCallExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockCallExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockCallExecutedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockCallExecuted struct {
	Id     [32]byte
	Index  *big.Int
	Target common.Address
	Value  *big.Int
	Data   []byte
	Raw    types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterCallExecuted(opts *bind.FilterOpts, id [][32]byte, index []*big.Int) (*RBACTimelockCallExecutedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "CallExecuted", idRule, indexRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockCallExecutedIterator{contract: _RBACTimelock.contract, event: "CallExecuted", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchCallExecuted(opts *bind.WatchOpts, sink chan<- *RBACTimelockCallExecuted, id [][32]byte, index []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "CallExecuted", idRule, indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockCallExecuted)
				if err := _RBACTimelock.contract.UnpackLog(event, "CallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseCallExecuted(log types.Log) (*RBACTimelockCallExecuted, error) {
	event := new(RBACTimelockCallExecuted)
	if err := _RBACTimelock.contract.UnpackLog(event, "CallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockCallScheduledIterator struct {
	Event *RBACTimelockCallScheduled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockCallScheduledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockCallScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockCallScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockCallScheduledIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockCallScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockCallScheduled struct {
	Id          [32]byte
	Index       *big.Int
	Target      common.Address
	Value       *big.Int
	Data        []byte
	Predecessor [32]byte
	Salt        [32]byte
	Delay       *big.Int
	Raw         types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterCallScheduled(opts *bind.FilterOpts, id [][32]byte, index []*big.Int) (*RBACTimelockCallScheduledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "CallScheduled", idRule, indexRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockCallScheduledIterator{contract: _RBACTimelock.contract, event: "CallScheduled", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchCallScheduled(opts *bind.WatchOpts, sink chan<- *RBACTimelockCallScheduled, id [][32]byte, index []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "CallScheduled", idRule, indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockCallScheduled)
				if err := _RBACTimelock.contract.UnpackLog(event, "CallScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseCallScheduled(log types.Log) (*RBACTimelockCallScheduled, error) {
	event := new(RBACTimelockCallScheduled)
	if err := _RBACTimelock.contract.UnpackLog(event, "CallScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockCancelledIterator struct {
	Event *RBACTimelockCancelled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockCancelledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockCancelledIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockCancelled struct {
	Id  [32]byte
	Raw types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterCancelled(opts *bind.FilterOpts, id [][32]byte) (*RBACTimelockCancelledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "Cancelled", idRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockCancelledIterator{contract: _RBACTimelock.contract, event: "Cancelled", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchCancelled(opts *bind.WatchOpts, sink chan<- *RBACTimelockCancelled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "Cancelled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockCancelled)
				if err := _RBACTimelock.contract.UnpackLog(event, "Cancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseCancelled(log types.Log) (*RBACTimelockCancelled, error) {
	event := new(RBACTimelockCancelled)
	if err := _RBACTimelock.contract.UnpackLog(event, "Cancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockFunctionSelectorBlockedIterator struct {
	Event *RBACTimelockFunctionSelectorBlocked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockFunctionSelectorBlockedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockFunctionSelectorBlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockFunctionSelectorBlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockFunctionSelectorBlockedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockFunctionSelectorBlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockFunctionSelectorBlocked struct {
	Selector [4]byte
	Raw      types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterFunctionSelectorBlocked(opts *bind.FilterOpts, selector [][4]byte) (*RBACTimelockFunctionSelectorBlockedIterator, error) {

	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "FunctionSelectorBlocked", selectorRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockFunctionSelectorBlockedIterator{contract: _RBACTimelock.contract, event: "FunctionSelectorBlocked", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchFunctionSelectorBlocked(opts *bind.WatchOpts, sink chan<- *RBACTimelockFunctionSelectorBlocked, selector [][4]byte) (event.Subscription, error) {

	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "FunctionSelectorBlocked", selectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockFunctionSelectorBlocked)
				if err := _RBACTimelock.contract.UnpackLog(event, "FunctionSelectorBlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseFunctionSelectorBlocked(log types.Log) (*RBACTimelockFunctionSelectorBlocked, error) {
	event := new(RBACTimelockFunctionSelectorBlocked)
	if err := _RBACTimelock.contract.UnpackLog(event, "FunctionSelectorBlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockFunctionSelectorUnblockedIterator struct {
	Event *RBACTimelockFunctionSelectorUnblocked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockFunctionSelectorUnblockedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockFunctionSelectorUnblocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockFunctionSelectorUnblocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockFunctionSelectorUnblockedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockFunctionSelectorUnblockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockFunctionSelectorUnblocked struct {
	Selector [4]byte
	Raw      types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterFunctionSelectorUnblocked(opts *bind.FilterOpts, selector [][4]byte) (*RBACTimelockFunctionSelectorUnblockedIterator, error) {

	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "FunctionSelectorUnblocked", selectorRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockFunctionSelectorUnblockedIterator{contract: _RBACTimelock.contract, event: "FunctionSelectorUnblocked", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchFunctionSelectorUnblocked(opts *bind.WatchOpts, sink chan<- *RBACTimelockFunctionSelectorUnblocked, selector [][4]byte) (event.Subscription, error) {

	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "FunctionSelectorUnblocked", selectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockFunctionSelectorUnblocked)
				if err := _RBACTimelock.contract.UnpackLog(event, "FunctionSelectorUnblocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseFunctionSelectorUnblocked(log types.Log) (*RBACTimelockFunctionSelectorUnblocked, error) {
	event := new(RBACTimelockFunctionSelectorUnblocked)
	if err := _RBACTimelock.contract.UnpackLog(event, "FunctionSelectorUnblocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockMinDelayChangeIterator struct {
	Event *RBACTimelockMinDelayChange

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockMinDelayChangeIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockMinDelayChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockMinDelayChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockMinDelayChangeIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockMinDelayChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockMinDelayChange struct {
	OldDuration *big.Int
	NewDuration *big.Int
	Raw         types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterMinDelayChange(opts *bind.FilterOpts) (*RBACTimelockMinDelayChangeIterator, error) {

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "MinDelayChange")
	if err != nil {
		return nil, err
	}
	return &RBACTimelockMinDelayChangeIterator{contract: _RBACTimelock.contract, event: "MinDelayChange", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchMinDelayChange(opts *bind.WatchOpts, sink chan<- *RBACTimelockMinDelayChange) (event.Subscription, error) {

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "MinDelayChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockMinDelayChange)
				if err := _RBACTimelock.contract.UnpackLog(event, "MinDelayChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseMinDelayChange(log types.Log) (*RBACTimelockMinDelayChange, error) {
	event := new(RBACTimelockMinDelayChange)
	if err := _RBACTimelock.contract.UnpackLog(event, "MinDelayChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockRoleAdminChangedIterator struct {
	Event *RBACTimelockRoleAdminChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockRoleAdminChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockRoleAdminChangedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RBACTimelockRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockRoleAdminChangedIterator{contract: _RBACTimelock.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RBACTimelockRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockRoleAdminChanged)
				if err := _RBACTimelock.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseRoleAdminChanged(log types.Log) (*RBACTimelockRoleAdminChanged, error) {
	event := new(RBACTimelockRoleAdminChanged)
	if err := _RBACTimelock.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockRoleGrantedIterator struct {
	Event *RBACTimelockRoleGranted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockRoleGrantedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockRoleGrantedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RBACTimelockRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockRoleGrantedIterator{contract: _RBACTimelock.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RBACTimelockRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockRoleGranted)
				if err := _RBACTimelock.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseRoleGranted(log types.Log) (*RBACTimelockRoleGranted, error) {
	event := new(RBACTimelockRoleGranted)
	if err := _RBACTimelock.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type RBACTimelockRoleRevokedIterator struct {
	Event *RBACTimelockRoleRevoked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *RBACTimelockRoleRevokedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RBACTimelockRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(RBACTimelockRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *RBACTimelockRoleRevokedIterator) Error() error {
	return it.fail
}

func (it *RBACTimelockRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type RBACTimelockRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log
}

func (_RBACTimelock *RBACTimelockFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RBACTimelockRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RBACTimelock.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RBACTimelockRoleRevokedIterator{contract: _RBACTimelock.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

func (_RBACTimelock *RBACTimelockFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RBACTimelockRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RBACTimelock.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(RBACTimelockRoleRevoked)
				if err := _RBACTimelock.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_RBACTimelock *RBACTimelockFilterer) ParseRoleRevoked(log types.Log) (*RBACTimelockRoleRevoked, error) {
	event := new(RBACTimelockRoleRevoked)
	if err := _RBACTimelock.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_RBACTimelock *RBACTimelock) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _RBACTimelock.abi.Events["BypasserCallExecuted"].ID:
		return _RBACTimelock.ParseBypasserCallExecuted(log)
	case _RBACTimelock.abi.Events["CallExecuted"].ID:
		return _RBACTimelock.ParseCallExecuted(log)
	case _RBACTimelock.abi.Events["CallScheduled"].ID:
		return _RBACTimelock.ParseCallScheduled(log)
	case _RBACTimelock.abi.Events["Cancelled"].ID:
		return _RBACTimelock.ParseCancelled(log)
	case _RBACTimelock.abi.Events["FunctionSelectorBlocked"].ID:
		return _RBACTimelock.ParseFunctionSelectorBlocked(log)
	case _RBACTimelock.abi.Events["FunctionSelectorUnblocked"].ID:
		return _RBACTimelock.ParseFunctionSelectorUnblocked(log)
	case _RBACTimelock.abi.Events["MinDelayChange"].ID:
		return _RBACTimelock.ParseMinDelayChange(log)
	case _RBACTimelock.abi.Events["RoleAdminChanged"].ID:
		return _RBACTimelock.ParseRoleAdminChanged(log)
	case _RBACTimelock.abi.Events["RoleGranted"].ID:
		return _RBACTimelock.ParseRoleGranted(log)
	case _RBACTimelock.abi.Events["RoleRevoked"].ID:
		return _RBACTimelock.ParseRoleRevoked(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (RBACTimelockBypasserCallExecuted) Topic() common.Hash {
	return common.HexToHash("0x6b983f337bab73dfe37faca733adf3ea35b45b8b144ec8ee2de3a1b224564b0c")
}

func (RBACTimelockCallExecuted) Topic() common.Hash {
	return common.HexToHash("0xc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58")
}

func (RBACTimelockCallScheduled) Topic() common.Hash {
	return common.HexToHash("0x4f4da6666f52e3b6dbc3638d8eae4017722678fe58bca79cd8320817807a65be")
}

func (RBACTimelockCancelled) Topic() common.Hash {
	return common.HexToHash("0xbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb70")
}

func (RBACTimelockFunctionSelectorBlocked) Topic() common.Hash {
	return common.HexToHash("0x15b40cf8ed4c95cd3c0e1dedfdb3987c3f9bf3d3770d13ddf6dc4daa5ffae9ef")
}

func (RBACTimelockFunctionSelectorUnblocked) Topic() common.Hash {
	return common.HexToHash("0xd91859a8d88193a56a2983deb65a5253985141c49c70bf016880b5243bd432e1")
}

func (RBACTimelockMinDelayChange) Topic() common.Hash {
	return common.HexToHash("0x11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5")
}

func (RBACTimelockRoleAdminChanged) Topic() common.Hash {
	return common.HexToHash("0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff")
}

func (RBACTimelockRoleGranted) Topic() common.Hash {
	return common.HexToHash("0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d")
}

func (RBACTimelockRoleRevoked) Topic() common.Hash {
	return common.HexToHash("0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b")
}

func (_RBACTimelock *RBACTimelock) Address() common.Address {
	return _RBACTimelock.address
}

type RBACTimelockInterface interface {
	ADMINROLE(opts *bind.CallOpts) ([32]byte, error)

	BYPASSERROLE(opts *bind.CallOpts) ([32]byte, error)

	CANCELLERROLE(opts *bind.CallOpts) ([32]byte, error)

	DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error)

	EXECUTORROLE(opts *bind.CallOpts) ([32]byte, error)

	PROPOSERROLE(opts *bind.CallOpts) ([32]byte, error)

	GetBlockedFunctionSelectorAt(opts *bind.CallOpts, index *big.Int) ([4]byte, error)

	GetBlockedFunctionSelectorCount(opts *bind.CallOpts) (*big.Int, error)

	GetMinDelay(opts *bind.CallOpts) (*big.Int, error)

	GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error)

	GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error)

	GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error)

	GetTimestamp(opts *bind.CallOpts, id [32]byte) (*big.Int, error)

	HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error)

	HashOperationBatch(opts *bind.CallOpts, calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) ([32]byte, error)

	IsOperation(opts *bind.CallOpts, id [32]byte) (bool, error)

	IsOperationDone(opts *bind.CallOpts, id [32]byte) (bool, error)

	IsOperationPending(opts *bind.CallOpts, id [32]byte) (bool, error)

	IsOperationReady(opts *bind.CallOpts, id [32]byte) (bool, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	BlockFunctionSelector(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error)

	BypasserExecuteBatch(opts *bind.TransactOpts, calls []RBACTimelockCall) (*types.Transaction, error)

	Cancel(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	ExecuteBatch(opts *bind.TransactOpts, calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte) (*types.Transaction, error)

	GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)

	OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error)

	OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error)

	OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error)

	RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)

	RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)

	ScheduleBatch(opts *bind.TransactOpts, calls []RBACTimelockCall, predecessor [32]byte, salt [32]byte, delay *big.Int) (*types.Transaction, error)

	UnblockFunctionSelector(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error)

	UpdateDelay(opts *bind.TransactOpts, newDelay *big.Int) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterBypasserCallExecuted(opts *bind.FilterOpts, index []*big.Int) (*RBACTimelockBypasserCallExecutedIterator, error)

	WatchBypasserCallExecuted(opts *bind.WatchOpts, sink chan<- *RBACTimelockBypasserCallExecuted, index []*big.Int) (event.Subscription, error)

	ParseBypasserCallExecuted(log types.Log) (*RBACTimelockBypasserCallExecuted, error)

	FilterCallExecuted(opts *bind.FilterOpts, id [][32]byte, index []*big.Int) (*RBACTimelockCallExecutedIterator, error)

	WatchCallExecuted(opts *bind.WatchOpts, sink chan<- *RBACTimelockCallExecuted, id [][32]byte, index []*big.Int) (event.Subscription, error)

	ParseCallExecuted(log types.Log) (*RBACTimelockCallExecuted, error)

	FilterCallScheduled(opts *bind.FilterOpts, id [][32]byte, index []*big.Int) (*RBACTimelockCallScheduledIterator, error)

	WatchCallScheduled(opts *bind.WatchOpts, sink chan<- *RBACTimelockCallScheduled, id [][32]byte, index []*big.Int) (event.Subscription, error)

	ParseCallScheduled(log types.Log) (*RBACTimelockCallScheduled, error)

	FilterCancelled(opts *bind.FilterOpts, id [][32]byte) (*RBACTimelockCancelledIterator, error)

	WatchCancelled(opts *bind.WatchOpts, sink chan<- *RBACTimelockCancelled, id [][32]byte) (event.Subscription, error)

	ParseCancelled(log types.Log) (*RBACTimelockCancelled, error)

	FilterFunctionSelectorBlocked(opts *bind.FilterOpts, selector [][4]byte) (*RBACTimelockFunctionSelectorBlockedIterator, error)

	WatchFunctionSelectorBlocked(opts *bind.WatchOpts, sink chan<- *RBACTimelockFunctionSelectorBlocked, selector [][4]byte) (event.Subscription, error)

	ParseFunctionSelectorBlocked(log types.Log) (*RBACTimelockFunctionSelectorBlocked, error)

	FilterFunctionSelectorUnblocked(opts *bind.FilterOpts, selector [][4]byte) (*RBACTimelockFunctionSelectorUnblockedIterator, error)

	WatchFunctionSelectorUnblocked(opts *bind.WatchOpts, sink chan<- *RBACTimelockFunctionSelectorUnblocked, selector [][4]byte) (event.Subscription, error)

	ParseFunctionSelectorUnblocked(log types.Log) (*RBACTimelockFunctionSelectorUnblocked, error)

	FilterMinDelayChange(opts *bind.FilterOpts) (*RBACTimelockMinDelayChangeIterator, error)

	WatchMinDelayChange(opts *bind.WatchOpts, sink chan<- *RBACTimelockMinDelayChange) (event.Subscription, error)

	ParseMinDelayChange(log types.Log) (*RBACTimelockMinDelayChange, error)

	FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RBACTimelockRoleAdminChangedIterator, error)

	WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RBACTimelockRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error)

	ParseRoleAdminChanged(log types.Log) (*RBACTimelockRoleAdminChanged, error)

	FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RBACTimelockRoleGrantedIterator, error)

	WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RBACTimelockRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error)

	ParseRoleGranted(log types.Log) (*RBACTimelockRoleGranted, error)

	FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RBACTimelockRoleRevokedIterator, error)

	WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RBACTimelockRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error)

	ParseRoleRevoked(log types.Log) (*RBACTimelockRoleRevoked, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
